# Time dependent graphs

# Test suite for the IGraph library.
# Copyright (C) 2014  Gabor Csardi <csardi.gabor@gmail.com>
# 334 Harvard street, Cambridge, MA 02139 USA
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA

AT_BANNER([Time-dependent graphs])

AT_SETUP([Creating (igraph_create_temporal): ])
AT_KEYWORDS([create temporal])
AT_COMPILE_CHECK([simple/temporal.c], [], [], [internal])
AT_CLEANUP

AT_SETUP([Temporal vcount (igraph_vcount): ])
AT_KEYWORDS([temporal vcount])
AT_COMPILE_CHECK([simple/temporal_vcount.c], [simple/temporal_vcount.out])
AT_CLEANUP

AT_SETUP([Temporal ecount (igraph_ecount): ])
AT_KEYWORDS([temporal ecount])
AT_COMPILE_CHECK([simple/temporal_ecount.c], [simple/temporal_ecount.out])
AT_CLEANUP

AT_SETUP([Temporal cursor: ])
AT_KEYWORDS([temporal cursor])
AT_COMPILE_CHECK([simple/temporal_now.c])
AT_CLEANUP

AT_SETUP([Temporal graphs, last time point (igraph_time_last): ])
AT_KEYWORDS([temporal last igraph_time_last])
AT_COMPILE_CHECK([simple/temporal_last.c])
AT_CLEANUP

AT_SETUP([Temporal graphs, range (igraph_time_range): ])
AT_KEYWORDS([temporal range igraph_time_range])
AT_COMPILE_CHECK([simple/temporal_range.c])
AT_CLEANUP

AT_SETUP([Temporal graphs, slicing (igraph_time_slice): ])
AT_KEYWORDS([temporal slicing igraph_time_slice])
AT_COMPILE_CHECK([simple/temporal_slice.c], [simple/temporal_slice.out])
AT_CLEANUP

AT_SETUP([Delete edges from temporal graph (igraph_delete_edges): ])
AT_KEYWORDS([delete edges temporal igraph_delete_edges])
AT_COMPILE_CHECK([simple/temporal_delete_edges.c],
		 [simple/temporal_delete_edges.out])
AT_CLEANUP

AT_SETUP([neighbors in temporal graph (igraph_neighbors): ])
AT_KEYWORDS([neighbors temporal igraph_neighbors])
AT_COMPILE_CHECK([simple/temporal_neighbors.c], [simple/temporal_neighbors.out])
AT_CLEANUP

AT_SETUP([degree in temporal graph (igraph_degree): ])
AT_KEYWORDS([degree temporal igraph_degree])
AT_COMPILE_CHECK([simple/temporal_degree.c], [simple/temporal_degree.out])
AT_CLEANUP

AT_SETUP([Edge queries in temporal graph (igraph_edge): ])
AT_KEYWORDS([edge temporal igraph_edge])
AT_COMPILE_CHECK([simple/temporal_edge.c])
AT_CLEANUP

AT_SETUP([Incident edges in temporal graph (igraph_incident): ])
AT_KEYWORDS([incident temporal igraph_incident])
AT_COMPILE_CHECK([simple/temporal_incident.c], [simple/temporal_incident.out])
AT_CLEANUP
