<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY igraph "<application>igraph</application>">
]>

<chapter id="igraphbook-random">
<title>Random Graphs</title>

<section><title>Classic Random Graphs</title>

<para>
Random graphs were introduced by Erdős and Rényi in the late
fifties. They defined two ways for generating random graph:
G<subscript>n,p</subscript> and G<subscript>n,m</subscript>, these
determine two ensembles of random graphs as well.
</para>

<para>
A G<subscript>n,p</subscript> graph is undirected, has n vertices and
p is the probability that an edge is present in the graph. So
G<subscript>n,p</subscript> graphs are generated by drawing an
indicator random variable for each possible edge in the graph.
</para>

<para>
A G<subscript>n,m</subscript> random graph is undirected, has n
vertices and m edges. The m edges are drawn uniformly random from the
set of all possible edges.
</para>

<para>
&igraph; can generate both types of random graphs with the
<function>erdos.renyi.game()</function> function. (All random graph
generators are called <emphasis>games</emphasis> in &igraph;.)
By default this function generates G<subscript>n,p</subscript> graphs,
but if the <parameter>type</parameter> argument is set to
<constant>gnm</constant> then G<subscript>n,m</subscript> graph will
be generated. The first argument of the function is the number of
vertices and the second is either p or m depending on the type of the
random graph.
</para>

<para>
Here is an example of a small random graph with low edge density:
<informalexample><programlisting>
<prompt>> </prompt>g &lt;- erdos.renyi.game(100, 2/100)
<prompt>> </prompt>plot(g, layout=layout.fruchterman.reingold, 
         vertex.size=3, labels=NA, frame=TRUE)
</programlisting>
<mediaobject>
<imageobject><imagedata fileref="random.pdf" format="PDF"/></imageobject>
<imageobject><imagedata fileref="random.png" format="PNG"/></imageobject>
</mediaobject></informalexample>
</para>

<para>
As an example we generate two random graphs, one of each type and plot
their degree distribution:
<informalexample><programlisting>
<prompt>> </prompt>g1 &lt;- erdos.renyi.game(10000, 8/10000, type="gnp")
<prompt>> </prompt>g2 &lt;- erdos.renyi.game(10000, 30000, type="gnm")
<prompt>> </prompt>plot(degree.distribution(g1), xlab="degree", 
       ylab="frequency", pch=1, col=1, type="b")
<prompt>> </prompt>points(degree.distribution(g2), pch=2, col=2, type="b")
</programlisting>
<mediaobject>
<imageobject><imagedata fileref="randomdeg.pdf" format="PDF"/></imageobject>
<imageobject><imagedata fileref="randomdeg.png" format="PNG"/></imageobject>
</mediaobject></informalexample>
</para>

<para>
In addition to the standard undirected random graphs,
<function>erdos.renyi.game</function> is also able to generate
directed graphs and graphs with loop edges. See the
<parameter>directed</parameter> and <parameter>loops</parameter>
arguments.
</para>

</section>

<!-- ######################################################## -->

<section><title>Preferential Attachment and Variations</title>

<para>
This is a growing graph model introduced first by Price [TODO] and
reintroduced later by Barabási and Albert 
<xref linkend="bib:barabasi99a" />. This is a discrete time step model
and it creates a directed graph (although &igraph; can create an
undirected one as well). We start with a single vertex and in each
time step add another vertex to the graph. This vertex then chooses a
number of old vertices (this is a parameter called m) randomly based
on their in-degree and initiates edges to them. In particular the
probability that a vertex is chosen is proportional to its in-degree
plus some constant (a). (This constant is need to have zero in-degree
vertices non-zero connection probability.)
The same process is repeated in the following time steps.
<informalexample><programlisting>
<prompt>> </prompt>g &lt;- barabasi.game(100)
<prompt>> </prompt>plot(g, layout=layout.kamada.kawai, vertex.size=3, 
        labels=NA, frame=TRUE)
</programlisting>
<mediaobject>
<imageobject><imagedata fileref="scalefree.pdf" format="PDF"/></imageobject>
<imageobject><imagedata fileref="scalefree.png" format="PNG"/></imageobject>
</mediaobject></informalexample>
</para>

<para>
In the default version of the &igraph;
<function>barabasi.game()</function> function, the number of edges
added in each time step is one (m=1) and the constant giving the
connection <quote>probability</quote> of the zero in-degree vertices
is also one (a=1). The former can be changes by assigning a different
value to the <parameter>m</parameter> parameter of the function, while
the latter is set via the <parameter>zero.appeal</parameter>.
TODO: examples
</para>

<para>
<function>barabasi.game()</function> creates directed graphs by
default, set the <parameter>directed</parameter> to
<constant>FALSE</constant> to generate undirected graphs. Note however
that even if the generated graph is undirected the connection
probability is still calculated based on the number of adjacent edges
<emphasis>not</emphasis> initiated by the given vertex as long as the
<parameter>out.pref</parameter> argument is not set to
<constant>TRUE</constant>. You can imagine this as first generating a
directed graph and then converting that to an undirected one.
</para>

<para>
If the <parameter>out.pref</parameter> is set to
<constant>TRUE</constant> then the total degree of the vertices is
used to generate the connection probabilities independently of whether
a directed or undirected graph is being created.
</para>

<para>
If the <parameter>out.seq</parameter> parameter is not
<constant>NULL</constant> then it must be a vector of n integer
numbers, n is the number of vertices in the graph. This vector is used
as the number of edges to add per time step, it's first element is
ignored as no edges are added while there is only a single vertex in
the graph.
</para>

<para>
If the <parameter>out.dist</parameter> parameter is not
<constant>NULL</constant> then it is used as the probabilities for
creating the number of edges to add in each time step. The first
element of it gives the probability that no edges will be added in a
time step, the second is the probability to add one edge, etc.
Note that you don't need to supply probabilities,
<parameter>out.dist</parameter> is normalized to create proper
probabilities. It is an error however to supply meaningless values in
<parameter>out.dist</parameter>, like negative numbers, or only zero
elements, or an empty vector.
</para>

<para> 
Note that the current version of <function>barabasi.game()</function>
may create graphs with multiple edges, this might change in the
future. 
</para>

<para>
The original Barabási-Albert model uses linear preferential
attachment, ie. the connection probability is proportional to the
degree of the vertices. Nonlinear variations can also be studied with
&igraph; by supplying the <parameter>power</parameter> parameter:
<informalexample><programlisting>
<prompt>> </prompt>g1 &lt;- barabasi.game(10000, power=0.5)
<prompt>> </prompt>g2 &lt;- barabasi.game(10000, power=1)
<prompt>> </prompt>g3 &lt;- barabasi.game(10000, poert=1.5)
<prompt>> </prompt>plot(degree.distribution(g3), xlab="degree", 
          ylab="frequency", log="xy", pch=3, col=3, type="b")
<prompt>> </prompt>points(degree.distribution(g2), pch=2, col=2, type="b")
<prompt>> </prompt>points(degree.distribution(g1), pch=1, col=1, type="b")
<prompt>> </prompt>legend(max(degree(g3)), 1, xjust=1, yjust=1,
          c(0.5,1,1.5), pch=1:3, col=1:3, lty=1)
</programlisting>
<mediaobject>
<imageobject><imagedata fileref="nonlinpadeg.pdf" format="PDF"/></imageobject>
<imageobject><imagedata fileref="nonlinpadeg.png" format="PNG"/></imageobject>
</mediaobject></informalexample>
</para>

<para>
Another generalization is the <parameter>time.window</parameter>
parameter. If this is not <constant>NULL</constant> then its value is
used as a time window: only adjacent edges connected in the previous
<parameter>time.window</parameter> are counted as a basis of the
preferential attachment. Some plots with different time window
parameters: TODO.
</para>

</section>

<!-- ######################################################## -->

<section><title>The Configuration Model</title>

<para>
</para>

</section>

<!-- ######################################################## -->

<section><title>Growing Random Graphs</title>

<para>
</para>

</section>

<!-- ######################################################## -->

<section><title>Trait Based Random Graphs</title>

<para>
</para>

</section>

<!-- ######################################################## -->

<section><title>Preferential Attachment and Aging</title>

<para>
</para>

</section>

</chapter>
