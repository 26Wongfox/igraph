# TODO: rewrite it some time to use automake

JAVA_PACKAGE=@JAVA_PACKAGE@
JAVA_PACKAGE_DOT=@JAVA_PACKAGE_DOT@
JAVA_PACKAGE_UNDERSCORE=@JAVA_PACKAGE_UNDERSCORE@
JAVA_PACKAGE_SLASH=@JAVA_PACKAGE_SLASH@
VERSION=@VERSION@

JAVAC=@JAVAC@
JAVAH=@JAVAH@
JAVA=@JAVA@
JAR=@JAR@

LIBS=@JAVA_LIBS@ @IGRAPH_LIBS@
CFLAGS=@JAVA_CPPFLAGS@ @IGRAPH_CFLAGS@

BUILDDIR=build

JAVA_SRC=$(wildcard src/*.java)
NATIVE_SRC=src/$(JAVA_PACKAGE_UNDERSCORE)_Graph.c \
    src/$(JAVA_PACKAGE_UNDERSCORE)_Graph.h
SRC=$(JAVA_SRC) $(NATIVE_SRC)

JAVA_TARGETS=$(patsubst src/%.java,$(BUILDDIR)/@JAVA_PACKAGE_SLASH@/%.class,$(JAVA_SRC))

DIST=$(SRC) Makefile.in Makefile manifest.in manifest configure

.PHONY: clean distclean

all: igraph-$(VERSION).jar

dist: igraph-$(VERSION).tar.gz

clean:
	rm -rf $(BUILDDIR) manifest
	
distclean: clean
	rm -f src/$(JAVA_PACKAGE_UNDERSCORE)_Graph.c src/Graph.java \
	  config.log config.status

igraph-$(VERSION).tar.gz: $(DIST)
	tar -cvvzf $@ $*

# Java archive file
igraph-$(VERSION).jar: $(BUILDDIR)/@JNI_LIBRARY_FILENAME@ $(JAVA_TARGETS) manifest
	cd $(BUILDDIR) && $(JAR) cfm $@ ../manifest *

# Java native library
build/@JNI_LIBRARY_FILENAME@: $(NATIVE_SRC)
	$(CC) $(CFLAGS) $(LIBS) -o $@ $<

# Files generated by stimulus
src/Graph.java: src/Graph.java.in
	$(PYTHON) ../../tools/stimulus.py \
	  -f ../functions.def \
	  -i $< -o $@ \
	  -t types-Java.def -l JavaJava
	  
src/$(JAVA_PACKAGE_UNDERSCORE)_Graph.c: src/$(JAVA_PACKAGE_UNDERSCORE)_Graph.c.in
	$(PYTHON) ../../tools/stimulus.py \
	  -f ../functions.def \
	  -i $< -o $@ \
	  -t types-C.def -l JavaC
	  
# Java compilation rule
build/$(JAVA_PACKAGE_SLASH)/%.class: src/%.java
	mkdir -p build/$(JAVA_PACKAGE_SLASH)
	${JAVAC} $<
	mv $(patsubst %.java,%.class,$<) build/$(JAVA_PACKAGE_SLASH)

# Java header compilation rule
src/$(JAVA_PACKAGE_UNDERSCORE)_Graph.h: build/$(JAVA_PACKAGE_SLASH)/Graph.class
	${JAVAH} -classpath build -jni $(JAVA_PACKAGE).Graph
	mv $(JAVA_PACKAGE_UNDERSCORE)_Graph.h src/

